#!/usr/bin/env python

import argparse
import yaml
import pprint
import math
import random
from midiutil import MIDIFile
#from midiutil import *
#import midiutil 

"""
Argumentos y parametros globales
"""
parser = argparse.ArgumentParser()
parser.add_argument( 
 'archivos',
 help  = 'Al menos un archivo en formato YAML para procesar',
 type  = argparse.FileType( 'r' ),
 nargs = '+'
)
parser.add_argument( 
 '-v',
 '--verbosity',
 help = 'Imprimir informacion',
)
parser.add_argument( 
 '-o',
 '--output',
 default = 'output',
 help = 'Nombre del archivo de salida',
)
parser.add_argument( 
 '-p',
 '--plot',
 help = 'Ploteo del arbol de relaciones entre unidades (dot ó png)',
)
args = parser.parse_args()

definiciones = []
for archivo in args.archivos:
  data = open( archivo.name, 'r' )
  definiciones.append( yaml.load( data ) )
verboseprint = pprint.pprint if args.verbosity else lambda *a, **k: None
salida = args.output

if args.plot:
  print( '#### CARGANDO libs ####' )
  import matplotlib.pyplot as plt
  import numpy as np
  import matplotlib.dates as mdates
  from datetime import datetime, timedelta

class Pista:
  """
  Clase para cada 'track' a partir de archivos.yml
  """
  cantidad = 0 
  defactos = {
    'bpm'           : 60,
    'canal'         : 1,
    'programa'      : None,
    'metro'         : '4/4',
    'alturas'       : [ 1 ],
    'clave'         : { 'alteraciones' : 0, 'modo' : 0 },
    'intervalos'    : [ 1 ],
    'voces'         : None,
    'duraciones'    : [ 1 ],
    'dinamicas'     : [ 1 ],
    'fluctuacion'   : { 'min' : 1, 'max' : 1 },
    'transportar'   : 0,
    'transponer'    : 0,
    'controladores' : [ None ],
    'reiterar'      : 1,
    'referente'     : None,
  }
 
  def __init__( 
    self,
    nombre,
    base,
    paleta,
    macroforma,
  ):
    self.nombre = nombre
    self.orden = Pista.cantidad 
    Pista.cantidad += 1
    self.oid = str( self.orden ) + self.nombre 
    self.base = base
    self.duracion = 0
    self.paleta = paleta # paleta de unidades
    self.macroforma = macroforma

    self.registros = {}
    self.secuencia = [] 
    self.ordenar()
    #self.secuencia = self.ordenar( macroforma )
    #pprint.pprint( self.registros )

    if args.plot:
      print( '#### crear grafico ####' )
      self.fig, self.ax = plt.subplots( figsize = ( 8, 5 ) )

    verboseprint( '\n#### ' + self.nombre + ' ####' )

  def __str__( self ):
    o = '' 
    for attr, value in self.__dict__.items():
      l = str( attr ) + ':' + str( value )
      o += l + '\n'
    return o

  def ordenar( 
    self,
    forma    = None,
    nivel    = 0,
    herencia = {},
  ):
    """
    Organiza unidades según relacion de referencia
    """
    forma = forma if forma is not None else self.macroforma
    nivel += 1
    herencia.pop( 'unidades', None )
    herencia.pop( 'reiterar', None )

    for u in forma:  
      verboseprint( '-' * ( nivel - 1 ) +  u  )

      if u in self.paleta:
        uo = self.paleta[ u ]
        # TODO q cuente recurrencias en diferentes niveles
        recurrencia = sum( 
          [ 1 for o in self.registros[ nivel ] if o[ 'nombre' ] == u ]
        ) if nivel in self.registros else 0 
        registro = { 
          'nombre'      : u,
          'recurrencia' : recurrencia,
          'nivel'       : nivel,
        }

        if 'referente' in herencia:
          registro[ 'referente' ] = herencia[ 'referente' ] 
        sucesion = {
          **uo,
          **herencia,
          **registro
        } 
        reiterar = uo[ 'reiterar' ] if 'reiterar' in uo else 0
        n = str( nivel ) + u + str( recurrencia )

        for r in range( reiterar + 1 ):
          self.registros.setdefault( nivel , [] ).append( registro )

          if 'unidades' in uo:
            sucesion[ 'referente' ] = registro 
            self.ordenar( 
              uo[ 'unidades' ],
              nivel,
              sucesion,
            ) 

          else: 
            #self.registros.setdefault( 'copa' , [] ).append( registro )
            factura = {
              **Pista.defactos,
              **sucesion,
            }
            o = self.secuenciar( factura ) 
            self.secuencia += o  

  def secuenciar( 
    self,
    unidad
  ):
    """
    Genera una secuencia de eventos a partir de unidades preprocesadas
    """

    revertir = unidad[ 'revertir' ] if 'revertir' in unidad else None 
    if isinstance( revertir , list ): 
      for r in revertir:
        if r in unidad:
          unidad[ r ].reverse() 
    elif isinstance( revertir , str ):
      if revertir in unidad:
        unidad[ revertir ].reverse() 

    intervalos    = unidad[ 'intervalos' ]
    alturas       = unidad[ 'alturas' ]
    voces         = unidad[ 'voces' ]
    duraciones    = unidad[ 'duraciones' ]
    dinamicas     = unidad[ 'dinamicas' ]
    controladores = unidad[ 'controladores' ]
    candidatos = [ 
      dinamicas,
      duraciones,
      alturas,
      controladores,
    ]
    ganador = max( candidatos, key = len )
    pasos = len( ganador )
    seq = []

    for paso in range( pasos ):
      """
      Combinar parametros: altura, duracion, dinamica, etc
      """
      duracion = duraciones[ paso % len( duraciones ) ]
      # TODO REVISAR
      rand_min = unidad['fluctuacion']['min'] if 'min' in unidad[ 'fluctuacion' ] else None
      rand_max = unidad['fluctuacion']['max'] if 'max' in unidad[ 'fluctuacion' ] else None
      fluctuacion = random.uniform( 
         rand_min,
         rand_max 
      ) if rand_min or rand_max else 1
      dinamica = dinamicas[ paso % len( dinamicas ) ] * fluctuacion
      controlador = controladores[ paso % len( controladores ) ]
      altura = alturas[ paso % len( alturas ) ]
      acorde = []
      nota = 'S' # Silencio

      if altura != 0:
        """
        altura / puntero intervalo
        """
        transponer  = unidad[ 'transponer' ] 
        transportar = unidad[ 'transportar' ]
        nota = transportar + intervalos[ ( altura - 1 ) + transponer % len( intervalos ) ] 
        if voces:
          for voz in voces:
            tonica = altura + ( voz[ paso % len( voz ) ] ) - 1 
            acorde += [ transportar +  intervalos[ tonica + transponer % len( intervalos ) ]  ]
      evento = {
        **unidad, #TODO pasa mucha cosa de mas aca
        'unidad'      : unidad[ 'nombre' ],
        'orden'       : paso,
        'altura'      : nota,
        'acorde'      : acorde,
        'duracion'    : duracion,
        'dinamica'    : dinamica,
        'controlador' : controlador,
      }
      seq.append( evento )
    return seq 

def referir(
  refs,
  o = None,
  ):
  """
  Extrae referentes recursivamente
  """
  referente   = refs[ 'referente' ]   if 'referente'   in refs else None
  nombre      = refs[ 'nombre' ]      if 'nombre'      in refs else None
  recurrencia = refs[ 'recurrencia' ] if 'recurrencia' in refs else None
  nivel       = refs[ 'nivel' ]       if 'nivel'       in refs else None
  output      = o                     if o is not None         else [ None ] * nivel 
  output[ nivel - 1 ] = ( nombre, recurrencia )
  if referente:
    referir( referente, output )
  return output

pistas = []
for d in definiciones:
  """
  Carga de pistas a partir de las definiciones
  """
  pista = Pista(
    d[ 'nombre' ],
    d[ 'base' ],
    d[ 'unidades' ],
    d[ 'macroforma' ],
  )
  pistas.append( pista )

opus = MIDIFile( Pista.cantidad ) 

potus = []
for pista in pistas:
  """
  Loop principal:
  """
  if args.plot:
    print( '#### PLOTEANDO ####' )
    levels = np.array( [-5, 5, -3, 3, -1, 1] )
    formato =  '%H:%M:%S'
    start = datetime.strptime( str( timedelta( seconds = 1 ) ), formato ) 
    dimension = sum( e['duracion'] * ( 60 / e['bpm'] ) for e in pista.secuencia ) 
    dimension = str( timedelta( seconds = dimension) )
    dimension = dimension.split('.')[0] 
    dimension = datetime.strptime( dimension, formato ) 
    stop  =  dimension
    pista.ax.plot( 
      ( start, stop ),
      ( 0, 0 ),
      'k',
      alpha = .5
    )

  momento = 0
  track = pista.orden
  potus.append([
    'addTrackName',
    track,
    momento,
    pista.nombre
  ])

  if 'bpm' in pista.base:
    potus.append([
      'addTempo',
      track,
      momento,
      pista.base['bpm']
    ])

  if 'metro' in pista.base:
    """
    Time Signature event
    https://midiutil.readthedocs.io/en/1.2.1/class.html#midiutil.MidiFile.MIDIFile.addTimeSignature
    denominator  = negative power of two: log10( X ) / log10( 2 ) 
    2 represents a quarter-note, 3 an eighth-note, etc.
    """
    metro            = pista.base['metro'].split( '/' )
    numerador        = int( metro[0] ) 
    denominador      = int( math.log10( int( metro[1] ) ) / math.log10( 2 ) )
    relojes_por_tick = 12 * denominador
    notas_por_negra  = 8
    potus.append([
      'addTimeSignature',
      track,
      momento,
      numerador,
      denominador,
      relojes_por_tick, 
      notas_por_negra
    ])

  if 'clave' in pista.base:
    potus.append([
      'addKeySignature',
      track,
      momento,
      pista.base[ 'clave' ][ 'alteraciones' ],
      1, # multiplica por el n de alteraciones
      pista.base[ 'clave' ][ 'modo' ]
    ])

  if 'programa' in pista.base:
    potus.append([
      'addProgramChange',
      track,
      pista.base[ 'canal' ],
      momento,  
      pista.base[ 'programa' ]
    ])

  for index, evento in enumerate( pista.secuencia ):
    verboseprint( evento )
    previo = pista.secuencia[ index - 1 ]
    unidad = evento[ 'unidad' ]
    previa = previo[ 'unidad' ]
    canal = evento[ 'canal' ]
    bpm = evento[ 'bpm' ]

    if ( previo['bpm'] != bpm ):
      potus.append([
        'addTempo',
        track,
        momento,
        bpm,
      ])
    metro = evento[ 'metro' ]

    if ( previo[ 'metro' ] != metro ):
      metro            = evento[ 'metro' ].split( '/' )
      numerador        = int( metro[ 0 ] ) 
      denominador      = int( math.log10( int( metro[ 1 ] ) ) / math.log10( 2 ) )
      relojes_por_tick = 12 * denominador
      notas_por_negra  = 8
      potus.append([
        'addTimeSignature',
        track,
        momento,
        numerador,
        denominador,
        relojes_por_tick, 
        notas_por_negra
      ])
    clave = evento[ 'clave' ]

    if ( previo[ 'clave' ] != clave ):
     potus.append([
       'addKeySignature',
       track,
       momento,
       clave[ 'alteraciones' ],
       1, # multiplica por el n de alteraciones
       clave[ 'modo' ]
     ])
    programa = evento[ 'programa' ]

    if programa:
      if ( previo[ 'programa' ] != programa ):
        potus.append([
          'addProgramChange',
          track,
          canal, 
          momento, 
          programa
        ])
        #opus.addText( pista.orden, momento , 'prgm : #' + str( programa ) )

    if ( evento[ 'orden' ] == 0 ):
      st = ''
      ers = referir( evento[ 'referente' ] ) if evento[ 'referente' ] != None else [( 0, 0 )]
      prs = referir( previo[ 'referente' ] ) if previo[ 'referente' ] != None else [( 0, 0 )]
      for er, pr in zip( ers, prs ):
        if er != pr: 
          st += str( er[ 0 ] ) + ' #' + str( er[ 1 ] ) + '\n' 
      st += unidad 
      potus.append([
       'addText',
        track,
        momento,
        st
      ])

      if args.plot:
        m =  momento * ( 60 / bpm) 
        t = str( timedelta( seconds = m ) )
        t = t.split('.')[0] # borra microsegundos
        idate = datetime.strptime( t , "%H:%M:%S" ) 
        level = levels[ index % 6 ]
        vert = 'top' if level < 0 else 'bottom'
        pista.ax.scatter(
          idate,
          0,
          s = 100,
          facecolor = 'w',
          edgecolor = 'k',
          zorder = 9999
         )
         # Plot a line up to the text
        pista.ax.plot(
          ( idate, idate ), 
          ( 0, level ), 
          c = 'r', 
          alpha = .7
        )
        # Give the text a faint background and align it properly
        pista.ax.text(
           idate,
           level,
           st,
           horizontalalignment = 'right',
           verticalalignment = vert,
           fontsize = 14,
           backgroundcolor = ( 1., 1., 1., .3 )
        )

    voces = evento[ 'acorde' ] if evento[ 'acorde' ] else [ evento[ 'altura' ] ]
    dinamica = int( evento[ 'dinamica' ] * 126 )
    duracion = evento[ 'duracion' ] 

    for voz in voces:
      altura = voz 
      if voz == 'S':
        dinamica = 0
        altura = 0
      # TODO agregar a lista de notas antes de mandar a opus.
      potus.append([
        'addNote',
        track, 
        canal, 
        altura, 
        momento, 
        duracion, 
        dinamica,
      ])
    if evento[ 'controlador' ]:
      for controlador, parametro in evento[ 'controlador' ].items():
        potus.append([
         'addControllerEvent',
          track, 
          canal, 
          momento, 
          controlador, 
          parametro, 
        ])
    momento += duracion

  if args.plot:
    pista.ax.set( title = pista.nombre )
    # Set the xticks formatting
    # format xaxis with 3 month intervals
    pista.ax.get_xaxis().set_major_locator( mdates.SecondLocator( interval = 3 ) )
    pista.ax.get_xaxis().set_major_formatter( mdates.DateFormatter( "%M %S" ) )
    pista.fig.autofmt_xdate()
    # Remove components for a cleaner look
    plt.setp( 
      (
        pista.ax.get_yticklabels() + 
        pista.ax.get_yticklines() +
        list( pista.ax.spines.values() )
      ),
      visible=False
    )


#with open( salida + ".mid", "wb" ) as output_file:
#  """
#  Salida
#  """
#  #cambiar a potus
#  opus.writeFile( output_file )

for potu in potus:
    mu = getattr( MIDIFile, potu[0] )
    pprint.pprint( potu[1:] )
    mu( *potu[1:] )

if args.plot:
  plt.show()

# un commit antes para volver a la implementacion basica de midiutil add function 
