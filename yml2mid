#!/usr/bin/env python

import argparse
import yaml
import weakref
import pprint
import math
#from music21 import *
import networkx as nx

from midiutil import MIDIFile


"""
Manejo de argumentos y parametros globales
"""
parser = argparse.ArgumentParser()
parser.add_argument( 
 'archivos',
 help  = 'Al menos un archivo en formato YAML para procesar',
 type  = argparse.FileType( 'r' ),
 nargs = '+'
)
parser.add_argument( 
 '-v',
 '--verbosity',
 help = 'Imprimir informacion',
)
parser.add_argument( 
 '-o',
 '--output',
 default = 'output',
 help = 'Nombre del archivo de salida',
)
args = parser.parse_args()
definiciones = []
for archivo in args.archivos:
  data = open( archivo.name, 'r' )
  definiciones.append( yaml.load( data ) )
verboseprint = print if args.verbosity else lambda *a, **k: None
salida = args.output


G = nx.Graph()

class Pista:
  """
  Clase para cada track a partir de archivos.yml
  """
  cantidad = 0 
 
  def __init__( 
    self,
    nombre,
    defaults,
    paleta,
    macroforma,
  ):
    self.nombre = nombre
    self.defaults = defaults
    self.paleta = paleta
    self.macroforma = macroforma
    self.arbol = {}
    for r in macroforma:
      self.arbol.setdefault( r , {})

    self.secuencia  = self.secuenciar()
    self.orden = Pista.cantidad 
    Pista.cantidad += 1

    verboseprint( '\n#### ', self.nombre, ' ####' )

  def __str__( self ):
    o = '' 
    for attr, value in self.__dict__.items():
      l = str( attr ) + ':' + str( value )
      o += l + '\n'
    return o

  # Paleta de Unidades
  @property
  def unidades( self ):
    unidades = {} 
    for unidad in self.paleta:
      unidades[ unidad ] = Unidad( 
        unidad, 
        self.paleta[ unidad ], 
        self
      )
    return unidades

  # Genera una secuencia a partir de unidades/parametros
  def secuenciar( 
    self,
    unidades = None,
    nivel = 0,
    referente = {},
  ):
    unidades = unidades if unidades is not None else self.macroforma
    nivel += 1
    #referente = pisar 

    sequencia = []
    paleta = self.unidades

    for u in unidades:  
      verboseprint( '-' * ( nivel - 1 ) +  u  )
      G.add_node( u )
      if 'referente' in referente:
        G.add_node( referente['referente'] )
        G.add_nodes_from( [ referente['referente'], u ] )
      if u in paleta:
        uo = paleta[ u ]
        # Mix propiedades con unidad referente

        if not uo.unidades:
          # Solo unidades de nivel 0 (no UoU) se secuencian 
          defactos = {
            'bpm'           : 60,
            'canal'         : 1,
            'programa'      : None,
            'metro'         : '4/4',
            'alturas'       : [ 1 ],
            'intervalos'    : [ 1 ],
            'voces'         : [ [ 0 ] ],
            #'voces'         : None,
            'duraciones'    : [ 1 ],
            'dinamicas'     : [ 1 ],
            'transportar'   : 0,
            #'octava'        : 0,
            'controladores' : [ None ],
          }
          # Mix parametros con unidad referente
          resultado = {
            **defactos,
            **uo.parametros,
            **referente
          } 

          intervalos = resultado['intervalos']
          alturas = resultado['alturas']
          voces = resultado['voces']
          duraciones = resultado['duraciones']
          dinamicas = resultado['dinamicas']
          controladores = resultado['controladores']

          candidatos = [ 
            dinamicas,
            duraciones,
            alturas,
            controladores,
            voces,
          ]

          ganador = max( candidatos, key=len )
          pasos = len( ganador )
          for paso in range( pasos ):
            # Combinar parametros: altura, duracion, dinamica, etc
            duracion  = duraciones[ paso % len( duraciones ) ]
            dinamica  = dinamicas[ paso % len( dinamicas ) ]
            controlador  = controladores[ paso % len( controladores ) ]
            alt  = alturas[ paso % len( alturas ) ]
            acorde = []
            if alt != 0:
              # Ajuste relacion altura / puntero intervalo
              alt = alt - 1
              nota = intervalos[ alt % len( intervalos ) ] + resultado['transportar']
              if voces:
               for voz in voces:
                 if voz[ paso % len( voz ) ] != 0:
                   fund = alt + ( voz[ paso % len( voz ) ] - 1)
                   acorde += [ intervalos[ fund % len( intervalos ) ]  + resultado['transportar']]
                 else:
                   acorde += [ 'S' ]
            else:
              # Silencio
              nota = 'S'
            evento = {
              'orden'       : paso,
              'unidad'      : u,
              'referente'   : resultado['referente'],
              #'referentes'  : resultado['referentes'],
              'canal'       : resultado['canal'],
              'programa'    : resultado['programa'],
              'bpm'         : resultado['bpm'],
              'metro'       : resultado['metro'],
              'transportar' : resultado['transportar'],
              #'octava'     : resultado['octava'],
              'altura'      : nota,
              'acorde'      : acorde,
              'duracion'    : duracion,
              'dinamica'    : dinamica,
              'controlador' : controlador,
            }
            sequencia.append( evento )
        else: 
          # Unidades con Unidades
          ## RELACIONES  
          #brote = {}
          #for r in uo.unidades:
          #  brote.setdefault( r, {} )

          #if u in self.arbol:
          #  print(u)
          #  print(self.arbol[u])
          #  for rama in self.arbol[u]:
          #    self.arbol[ u ][ rama ] = brote 
          #    print( self.arbol[ u ][rama] )

          #else:
          #  self.arbol[ u ] = brote 
          ##self.arbol.setdefault( u, brote )
              

          mezcla = { **uo.parametros , **referente }
          mezcla['referente'] = u 
          #mezcla.setdefault( 'referentes', [] ).append( u )
          sequencia += self.secuenciar( 
            uo.unidades,
            nivel,
            mezcla
          ) 
    return sequencia

class Unidad:
  """
  Clase para las unidades de cada track
  TO DO: pasar a dataclass
  """
  cantidad = 0
  def __init__( 
    self,
    nombre,
    parametros,
    track
  ):
    self.nombre = nombre 
    self.parametros = parametros 
    self.track = weakref.ref( track )
    Unidad.cantidad += 1

  def __str__( self ):
    return self.nombre

  def mostrar_cantidad( self ):
    print( "Cantidad de Unidades: %d" % Unidad.cantidad )

  # Unidad de Unidades
  @property
  def unidades( self ):
    if 'unidades' in self.parametros:
      return self.parametros['unidades']
      
"""
Carga de pistas a partir de las definiciones
"""
pistas = []
for d in definiciones:
  pista = Pista(
    d['nombre'],
    d['base'],
    d['unidades'],
    d['macroforma'],
  )
  pistas.append( pista )

"""
Loop principal:
Recorre cada pista y partir de su secuencia genera Notas o Silencios que agrupa
en una Parte para finalmente agregarlas a una Partirtura de Musescore
"""
opus = MIDIFile( Pista.cantidad ) 
for pista in pistas:
  #pprint.pprint(pista.arbol)
  momento = 0
  track = pista.orden
  opus.addTrackName(
    track,
    momento,
    pista.nombre
  )
  opus.addTempo(
    track,
    momento,
    pista.defaults['bpm']
  )
  """
  Time Signature event
  https://midiutil.readthedocs.io/en/1.2.1/class.html#midiutil.MidiFile.MIDIFile.addTimeSignature
  The denominator is a negative power of two: log10( X ) / log10( 2 ) 
  2 represents a quarter-note, 3 represents an eighth-note, etc.
  """
  numerador, denominador = pista.defaults['metro'].split( '/' )
  denominador = int( math.log10( int( denominador ) ) / math.log10( 2 ) )
  relojes_por_tick = 12 * denominador
  notas_por_negra = 8
  opus.addTimeSignature( 
    track,
    momento,
    int( numerador ),
    denominador,
    relojes_por_tick, 
    notas_por_negra
  )

  if 'programa' in pista.defaults:
    opus.addProgramChange(
      track,
      pista.defaults['canal'],
      momento, 
      pista.defaults['programa']
    )
  for index, evento in enumerate( pista.secuencia ):
    evento = pista.secuencia[ index ]
    verboseprint( evento )
    previo = pista.secuencia[ index - 1 ]
    unidad = evento['unidad']
    canal = evento['canal']
    bpm = evento['bpm']
    if ( previo['bpm'] != bpm ):
      opus.addTempo(
        track,
        momento,
        bpm,
      )
    metro = evento['metro']
    if ( previo['metro'] != metro ):
      numerador, denominador = metro.split( '/' )
      denominador = int( math.log10( int( denominador ) ) / math.log10( 2 ) )
      relojes_por_tick = 12 * denominador
      notas_por_negra = 8
      opus.addTimeSignature( 
        track,
        momento,
        int( numerador ),
        denominador,
        relojes_por_tick, 
        notas_por_negra
      )
    programa = evento['programa']
    if programa:
      if ( previo['programa'] != programa ):
        opus.addProgramChange(
          track,
          canal, 
          momento, 
          programa
        )
        #opus.addText( pista.orden, momento , 'prgm : #' + str( programa ) )
    if ( evento['orden'] == 0 ):
      # TODO mejorar referencias
      st = unidad
      if (
        'referente' in evento
      ):
      #) and ( 
      #  previo['referente'] != evento['referente']
      #):
        #for i,r in enumerate( evento['referentes'] ):
        #  st = st + '\n'+ str( r )

        st =  evento[ 'referente' ]  + '-->' + unidad 
        print(st)

      opus.addText(
        track,
        momento,
        st
      )

    #altura = evento['altura']
    voces = [ evento['altura'] ]
    if evento['acorde']:
      voces = evento['acorde']

    duracion = evento['duracion'] 
    dinamica = int( evento['dinamica'] * 126 )
    for voz in voces:
      altura = voz 
      if voz == 'S':
        dinamica = 0
        altura = 0
      opus.addNote( 
        track, 
        canal, 
        altura , 
        momento, 
        duracion, 
        dinamica ,
      )

    if evento['controlador']:
      for controlador, parametro in evento['controlador'].items():
        opus.addControllerEvent( 
          track, 
          canal, 
          momento, 
          controlador, 
          parametro, 
        )
    momento = momento + duracion

"""
Salida
"""
with open( salida + ".mid", "wb" ) as output_file:
  opus.writeFile( output_file )

import matplotlib.pyplot as plt
nx.draw(
 G, 
 with_labels=True, 
)
plt.savefig('prueba.png')

#pprint.pprint(G)
#G = nx.petersen_graph()
#plt.savefig('prueba.png')
#plt.subplot(121)
#nx.draw(G, with_labels=True, font_weight='bold')
#plt.subplot(122)
#nx.draw_shell(G, nlist=[range(5, 10), range(5)], with_labels=True, font_weight='bold')
#
#from networkx.drawing.nx_pydot import write_dot
#pos = nx.nx_agraph.graphviz_layout(G)
#nx.draw(G, pos=pos)
#write_dot(G, 'file.dot')
